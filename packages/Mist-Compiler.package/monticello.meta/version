(name 'Mist-Compiler-MartinMcClure.17' message 'Refactored grammar and parser to allow for primitive methods.Wee start on compiler functionality. Really, next step is semantic analysis.Fixed a typo in the grammar.' id '792fc209-5bac-44fe-a759-6bb4238fb8d4' date '27 April 2016' time '8:48:47.957838 pm' author 'MartinMcClure' ancestors ((name 'Mist-Compiler-MartinMcClure.16' message 'A bit of work on specs and macro Fog.' id 'af1d86f0-b4e9-414d-aa75-a0118e6e1349' date '25 April 2016' time '10:43:33.566652 pm' author 'MartinMcClure' ancestors ((name 'Mist-Compiler-MartinMcClure.15' message 'First stab at name scoping and variables at the Macro Fog level.' id 'fa56e1e3-0f45-4703-85ee-56fca40d6b6f' date '19 November 2015' time '6:15:27.04957 pm' author 'MartinMcClure' ancestors ((name 'Mist-Compiler-MartinMcClure.14' message 'More parser progress.' id 'f9d5c022-95b9-4630-bb86-97ee5f051553' date '12 November 2015' time '5:05:14.205561 am' author 'MartinMcClure' ancestors ((name 'Mist-Compiler-MartinMcClure.13' message 'Got Symbol literal parsing working, and added parsing of nil, true, and false literals. ' id '7affbe5a-b868-4486-9c81-a80521cb6a2e' date '23 October 2015' time '3:42:22.603771 pm' author 'MartinMcClure' ancestors ((name 'Mist-Compiler-MartinMcClure.12' message 'More work on parsing literal forms.' id '6df66a12-1588-4a43-9068-c04e48b22d98' date '10 October 2015' time '11:10:25.771047 am' author 'MartinMcClure' ancestors ((name 'Mist-Compiler-MartinMcClure.11' message 'One step towards making symbol literals work.' id 'd69c1e35-601d-43ce-bb7a-507065a2f877' date '23 September 2015' time '11:48:40.970635 pm' author 'MartinMcClure' ancestors ((name 'Mist-Compiler-MartinMcClure.10' message 'Parse array literals, which took a slight refactoring of the literal productions.' id 'a0948aa3-b328-4ed0-b49c-27479dd2a51f' date '19 September 2015' time '12:14:10.28741 pm' author 'MartinMcClure' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())